{==============================================================================]
|                               SRL Quest Runner                               |
|                                Rune Mysteries                                |
|                                Version: 0.01                                 |
|                               r!ch!e & Camaro                                |
[==============================================================================]
| Description: Completes Rune Mysteries Quest                                  |
|                                                                              |
[==============================================================================]
| Setup:                                                                       |
|            1.                                                                |
|            2.                                                                |
|            3.                                                                |
|            4.                                                                |
[==============================================================================]
| Features:                                                                    |
|            *                          *                                      |
|            *                          *                                      |
|            *                          *                                      |
|            *                          *                                      |
[==============================================================================]
| Version:                                                                     |
|            0.00 -                                                            |
|            0.00 -                                                            |
|            0.00 -                                                            |
[==============================================================================]
| Notes:                                                                       |
[==============================================================================]
| Future                                                                       |
| Updates:                                                                     |
[==============================================================================]
| Random Shit:                                                                 |
|                                                                              |
|                                                                              |
|                                                                              |
|                                                                              |
|                                                                              |
[==============================================================================}

program RuneMysteries;
{$DEFINE SMART} // Comment line if not using SMART
{$I SRL\SRL.scar}
{$I SRL\SRL\Skill\Magic.scar}
{$I Reflection\Reflection.simba}
{$I SRL\SRL\Misc\PaintSMART.scar}
{$I Reflection\Core\RefPaint.simba}

{******************************************************************************)
                                  Setup Here
*******************************************************************************}

const
  UseRef = True;  // True: Use Reflection for script
                  // False: Use Colour

procedure SetupSmart;
begin
  Smart_Server      := 152;
  Smart_Members     := False;
  Smart_Signed      := True;
  Smart_SuperDetail := False;
end;

procedure DeclarePlayers;
begin
  HowManyPlayers := 1;
  NumberOfPlayers(HowManyPlayers);
  CurrentPlayer := 0;

  with Players[0] do
  begin
    Name        := 'mbudik1fng9vso@btyahoo.com';//'qyzkkbud@lol.com';
    Pass        := 'scripttest';
    Nick        := 'chm';
    BoxRewards  := ['Lamp', 'Coins'];           // Box Reward
    LampSkill   := 'Prayer';                    // Skill to advance with Lamp Reward
    Active      := True;                        // Active ?
  end;

{  with Players[0] do
  begin
    Name        := 'Username';
    Pass        := 'Password';
    Nick        := '3 - 4 Letters of Username';
    BoxRewards  := ['Lamp', 'Coins'];           // Box Reward
    LampSkill   := 'Prayer';                    // Skill to advance with Lamp Reward
    Active      := True;                        // Active ?
  end;
}
  {
  with Players[1] do
  begin
    Name        := 'Username';
    Pass        := 'Password';
    Nick        := '3 - 4 Letters of Username';
    BoxRewards  := ['Lamp', 'Coins'];           // Box Reward
    LampSkill   := 'Prayer';                    // Skill to advance with Lamp Reward
    Active      := True;                        // Active ?
  end;
  }

end;

{******************************************************************************)
                                  End Setup
*******************************************************************************}

{*******************************************************************************
                              Constants and Vars
*******************************************************************************}

const
  // Script
    SCRIPT_VER  = 0.01;
    MOUSE_SPEED = 11;
  // Ref
    R_WALK_LS = 0; // Lumbridge Stairs
    R_WALK_LD = 1; // Lumbridge Duke
    R_WALK_LT = 2; // Lumbridge to Tower
    R_WALK_LV = 3; // Lumbridge to Varrock
  // Interfaces
    INTERFACE_CHAT_XOFFSET = 7;
    INTERFACE_CHAT_YOFFSET = 347;

  // Lumby Stair Info
    LS_COL          = 4871776;
    LS_TOL          = 15;
    LS_ATPA_WIDTH   = 7;
    LS_WIDTH        = 6;
    LS_HEIGHT       = 6;
    LS_UPTEXT       = 'tair';
    LS_OPTION       = 'limb-up';
    LS_XMOD         = -7;
    LS_YMOD         = -7;
  // Lumby Door Colours
    LD_COL          = 9825004;
    LD_HUE          = 0.03;
    LD_SAT          = 3.41;
    LD_TOL          = 8;
    LD_W            = 5;
    LD_H            = 6;
    LD_XMOD         = 6;
    LD_YMOD         = 0;
    LD_UPT          = 'oor';
  // Duke Colours
    DH_COL          = 1650489 ;
    DH_HUE          = 0.17;
    DH_SAT          = 0.28;
    DH_TOL          = 5;
    DH_W            = 5;
    DH_H            = 8;
    DH_XMOD         = 0;
    DH_YMOD         = 0;
    DH_UPT          = 'uke';
  // Tower Door Colours
    TD_COL          = 4090509;
    TD_HUE          = 0.03;
    TD_SAT          = 0.08;
    TD_TOL          = 5;
    TD_W            = 38;
    TD_H            = 34;
    TD_XMOD         = 0;
    TD_YMOD         = 0;
    TD_UPT          = 'oor';
  // Basement Black Colours
    BB_COL          = 789517;
    BB_HUE          = 0.00;
    BB_SAT          = 0.00;
    BB_TOL          = 0;
    BB_W            = 34;
    BB_H            = 23;
    BB_XMOD         = 0;
    BB_YMOD         = 0;
    BB_UPT          = 'der';
  // Sedridor Colours
    SE_COL          = 12283405;
    SE_HUE          = 0.01;
    SE_SAT          = 0.63;
    SE_TOL          = 18;
    SE_W            = 36;
    SE_H            = 43;
    SE_XMOD         = 0;
    SE_YMOD         = 0;
    SE_UPT          = 'edri';

{*******************************************************************************
                            End Constants and Vars
*******************************************************************************}

{*******************************************************************************
                                   Script
*******************************************************************************}

{*******************************************************************************
function PlayerIdle: Boolean;
Description: Returns True if player is idle
*******************************************************************************}
function PlayerIdle: Boolean;
var
  MinPixelShift, MaxPixelShift, Interval, MaxTime, WaitTime, AVG: Integer;
  PixelBox : TBox;
begin

  MinPixelShift := 0;
  MaxPixelShift := 60;
  PixelBox := IntToBox(MSCX - 10, MSCY - 25, MSCX + 15, MSCY + 15);//Players Box
  Interval := 25;
  MaxTime := 125;
  WaitTime := 500;


  Avg := AveragePixelShift(PixelBox, Interval, MaxTime);
  Result := InRange(Avg, MinPixelShift, MaxPixelShift);

  if (Result) then
    Writeln('Player animation: Idle');
end;

{*******************************************************************************
function R_SecondFloor : Boolean;
Description: [REF] Returns True if on the second floor
*******************************************************************************}
function R_SecondFloor : Boolean;
var
  t: TTile;
begin
  t := GetMyPos;
  while (not (t = Tile(3205, 3228)) or (t = Tile(3206, 3229))) do
  begin
    Wait(RandomRange(500, 800));
    t := GetMyPos;
  end;
  Result := True;
  Writeln('On Second Floor');
end;

{*******************************************************************************
function SecondFloor : Boolean;
Description: Returns True if on the second floor
*******************************************************************************}
function SecondFloor : Boolean;
var
  x, y: Integer;
begin
  //Result := CountColorTolerance(131333, MMX1, MMY1, MMX2, MMY2, 4) > 1200;
  Result := (not(FindSymbol(X, Y, 'water')));
end;

{*******************************************************************************
function R_UpLumbridgeStairs: Boolean;
Description: [REF] Returns True if stairs are successfully climbed
*******************************************************************************}
function R_UpLumbridgeStairs: Boolean;
var
  TP: TPoint;
  i: Integer;
begin
  for i := 1 to 3 do
  begin
    TP := TileToMS(GetObjectAt(Tile(3204, 3229), OBJECT_TYPE_INTERACTABLE).Tile, 1);
    R_Debug(IntToStr(TP.x) + ',' + IntToSTr(TP.y), '');
    Mouse(TP.x, TP.y, 2, 2, False);
    if WaitOption('up', 300 + Random(300)) then
    begin
      Result := True;
      Writeln('Climbed Stairs');
      Exit;
    end;
    Wait(RandomRange(500, 800));
  end;
end;

{*******************************************************************************
function UpLumbridgeStairs: Boolean;
Description: Returns True if stairs are successfully climbed
*******************************************************************************}
function UpLumbridgeStairs(Color, Tolerance, ATPAWidth, W, H, XMOD, YMOD : Integer; UpText, Option: String)  : Boolean;
var
  X, Y, I, C , F, n: Integer;
  TPA : TPointArray;
  ATPA : T2DPointArray;
  TB : TBox;
  BadBoxes: TBoxArray;

begin
  FindColorsTolerance(TPA, Color, MSCX - 140, MSCY - 140, MSCX - 10, MSCY - 10, Tolerance);
  if (Length(TPA) < 1) then
  begin
    Writeln('No stairs');
    Exit;
  end;
  SortTPAFrom(TPA, Point(MSCX, MSCY));
  ATPA := TPAToATPA(TPA, ATPAWidth);
  SortATPAFrom(ATPA, Point(MSCX, MSCY));
  C := High(ATPA);
  for I := 0 to C do
  begin
    TB := GetTPABounds(ATPA[I]);

    if (TB.X2 - TB.X1 <= W) and (TB.Y2 - TB.Y1 <= H) then
      Continue;

    MiddleTPAEx(ATPA[i], X, Y);
    for F := 0 to High(BadBoxes) do
    begin
      if (PointInBox(Point(X, Y), BadBoxes[F])) then
      begin
        N := F;
        Break;
      end;
    end;
    if (Length(BadBoxes) > 0) then
    if (PointInBox(Point(X, Y), BadBoxes[N])) then
    begin
      Writeln('Point was in bad box[ '+ToStr(N)+']');
      N := 0;

      Continue;
    end;
    if (X > MSCX) then
      Continue;
    if (Y > MSCY) then
      Continue;
    MMouse(X + XMOD, Y + YMOD, 4, 4);
    if (WaitUpText(UpText, 200)) then
    begin
      GetMousePos(X, Y);
      Mouse(X, Y, 0, 0, False);
      if (WaitOption(Option, 500)) then
      begin
        FFlag(0);
        Result := WaitFunc(@SecondFloor, 200, 5000);
        Wait(1000 + Random(1000));
        Exit;
      end;
    end else
    begin
      SetLength(BadBoxes, length(BadBoxes) + 1);
      BadBoxes[high(BadBoxes)] := IntToBox(X - 16, Y - 16, X + 16, Y + 16);
    end;
  end;
end;

{*******************************************************************************
function WalkTo(Color, Tolerance, RX, RY: Integer; SortFrom: TPoint ): Boolean;
Description: Walks places
*******************************************************************************}
function WalkTo(Color, Tolerance, RX, RY: Integer; SortFrom: TPoint; Bad: TBox): Boolean;
var
  i: Integer;
  TPA: TPointArray;
begin
  if not LoggedIn then Exit;

  FindNormalRandoms;


  FindColorsSpiralTolerance(MMCX, MMCY, TPA, Color, MMX1, MMY1, MMX2, MMY2, Tolerance);
  SortTPAFrom(TPA, SortFrom);

  for i := 0 to High(TPA) do
  begin

    if (not rs_OnMinimap(TPA[i].x + rx, TPA[i].y + ry)) then
      Continue;

    if PointInBox(TPA[i], Bad) then
      Continue;

    Mouse(TPA[i].x + rx, TPA[i].y + ry, 0, 0, True);
    FFlag(6);
    Wait(1400 + Random(1400));
    Result := True;
    Break;
  end;
end;

{*******************************************************************************
function UseCTS(COL: Integer; HUE, SAT: Extended; Width, Height, TOL, XMOD, YMOD: Integer; SortPoint: TPoint; UpText: String): Boolean;
Description: Uses CTS Modifiers to find things
*******************************************************************************}
function UseCTS(COL: Integer; HUE, SAT: Extended; Width, Height, TOL, XMOD, YMOD: Integer; SortPoint: TPoint; UpText: String): Boolean;
var
  TPA   : TPointArray;
  ATPA  : T2DPointArray;
  i, h, x, y, oldCTS : Integer;
  oldHUE, oldSAT : Extended;
  TB: TBox;
begin
  if (not (LoggedIn)) then
    Exit;

  try
    Wait(1);

  oldCTS := GetColorToleranceSpeed;
  GetColorspeed2Modifiers(oldHUE, oldSAT);

  ColorToleranceSpeed(2);
  SetColorSpeed2Modifiers(HUE, SAT);

  if (FindColorsSpiralTolerance(x, y, TPA, COL, MSX1, MSY1, MSX2, MSY2, TOL)) then
  begin
    ATPA := SplitTPAEx(TPA, Width, Height);
    if Length(ATPA) = 0 then
    begin
      Writeln('ATPA in proc UseCTS empty');
      Exit;
    end;
    Writeln('Sorting useCTS');
    SortATPAFromFirstPoint(ATPA, Point(SortPoint.x, SortPoint.y));
    h := High(ATPA);
    for i := 0 to h do
    begin
      TB := GetTPABounds(ATPA[I]);
      Writeln('Width = ' + IntToStr(TB.X2 - TB.X1) + ', Height = ' + IntToStr(TB.Y2 - TB.Y1));
      if (TB.X2 - TB.X1 <= Width) and (TB.Y2 - TB.Y1 <= Height) then
      begin
        MiddleTPAEx(ATPA[i], x, y);
        if PointInBox(Point(x, y), IntToBox(MSCX - 4, MSCY - 23, MSCX + 4, MSCY - 10)) then
          Continue;
        MMouse(x + XMOD, y + YMOD, 2, 2);
        if WaitUpText(UpText, RandomRange(250, 350)) then
        begin
          Mouse(x, y, 0, 0, True);
          Wait(400 + RandomRange(400, 800));
          Result := True;
          Exit;
        end;
      end;
    end;
  end;
  finally
    // Restore previous CTS + Modifiers
    SetColorSpeed2Modifiers(oldHUE, oldSAT);
    ColorToleranceSpeed(oldCTS);
  end;
end;

{*******************************************************************************
function _FindDoor(COL: Integer; HUE, SAT: Extended; Width, Height, TOL, XMOD, YMOD: Integer; SortPoint: TPoint; UpText: String): Boolean;
Description: Opens door
*******************************************************************************}
function _FindDoor(COL: Integer; HUE, SAT: Extended; Width, Height, TOL, XMOD, YMOD: Integer; SortPoint: TPoint; UpText: String): Boolean;
var
  TPA   : TPointArray;
  ATPA  : T2DPointArray;
  i, h, x, y, oldCTS : Integer;
  oldHUE, oldSAT : Extended;
  TB : TBox;
begin
  if (not (LoggedIn)) then
    Exit;

  try
    Wait(1);

  oldCTS := GetColorToleranceSpeed;
  GetColorspeed2Modifiers(oldHUE, oldSAT);

  ColorToleranceSpeed(2);
  SetColorSpeed2Modifiers(HUE, SAT);

  if (FindColorsSpiralTolerance(x, y, TPA, COL, MSX1, MSY1, MSX2, MSY2, TOL)) then
  begin
    ATPA := SplitTPAEx(TPA, Width, Height);
    if Length(ATPA) = 0 then
    begin
      Writeln('ATPA in proc FindDoor empty');
      Exit;
    end;
    SortATPAFromFirstPoint(ATPA, Point(SortPoint.x, SortPoint.y));
    h := High(ATPA);
    for i := 0 to h do
    begin
      TB := GetTPABounds(ATPA[I]);
      Writeln('Width = ' + IntToStr(TB.X2 - TB.X1) + ', Height = ' + IntToStr(TB.Y2 - TB.Y1));
      if (TB.X2 - TB.X1 <= Width) and (TB.Y2 - TB.Y1 <= Height) then
      begin
        MiddleTPAEx(ATPA[i], x, y);
        MMouse(x + XMOD, y + YMOD, 2, 2);
        Wait(80 + Random(40));
        if WaitUpText(UpText, RandomRange(250, 350)) then
        begin
          if IsUpText('pen') then
          begin
            Writeln('Opening door');
            GetMousePos(X, Y);
            Mouse(x, y, 0, 0, False);
            WaitOption('pen', RandomRange(400, 800));
            Result := True;
            Exit;
          end else
          if IsUpText('lose') then
          begin
            Result := True;
            Writeln('Door is open');
            Exit;
          end;
        end;
      end;
    end;
  end;
  finally
    // Restore previous CTS + Modifiers
    SetColorSpeed2Modifiers(oldHUE, oldSAT);
    ColorToleranceSpeed(oldCTS);
  end;
end;

{*******************************************************************************
function R_FindLumbyDoor: Boolean;
Description: [REF] Opens Door
*******************************************************************************}
function R_FindLumbyDoor: Boolean;
var
  TP: TPoint;
  o: TRSObject;
begin
  o := GetObjectByID(36845, OBJECT_TYPE_WALLOBJECT, 30);
  DumpObjects([o]);
  R_Debug(IntToStr(TP.x) + ',' + IntToSTr(TP.y), '');
  if (o = NULL_RSOBJECT) then
  begin
    Writeln('Door Closed');

    Result := (_FindDoor(LD_COL, LD_HUE, LD_SAT, LD_W, LD_H, LD_TOL, LD_XMOD, LD_YMOD, Point(MSCX, MSCY), LD_UPT));
    {CANT INTERACT WITH REFLECTION ?}
  end else
  begin
    Writeln('Door Open');
    Result := True;
  end;
end;
{*******************************************************************************
function FindLumbyDoor: Boolean;
Description: Opens door
*******************************************************************************}
function FindLumbyDoor: Boolean;
begin
  Result := (_FindDoor(LD_COL, LD_HUE, LD_SAT, LD_W, LD_H, LD_TOL, LD_XMOD, LD_YMOD, Point(MSCX, MSCY), LD_UPT));
end;

{*******************************************************************************
function FindTowerDoor: Boolean;
Description: Opens door
*******************************************************************************}
function FindTowerDoor: Boolean;
begin
  Result := (_FindDoor(TD_COL, TD_HUE, TD_SAT, TD_W, TD_H, TD_TOL, TD_XMOD, TD_YMOD, Point(MSCX, MSCY), TD_UPT));
end;

{*******************************************************************************
function R_FindDuke: Boolean;
Description: [REF] Finds the duke.
*******************************************************************************}
function R_FindDuke: Boolean;
var
  NPC: TNPC;
  TP: TPoint;
  i: Integer;
begin
  for i := 1 to 4 do
  begin
    FindNPC(741, NPC);
    if NPC.Moving then
    begin
      Writeln('Duke Moving');
      Wait(800 + RandomRange(100, 300));
      Continue;
    end;
    //DumpNPCs([NPC]);
    TP := TileToMS(NPC.Tile, 1);
    Mouse(TP.x, TP.y, 2, 2, True);
    Wait(800 + Random(300));
    while not IsIdle do
      Wait(400);
    if FindNPCText('eetin') then
    begin
      Result := True;
      Exit;
    end;
  end;
end;

{*******************************************************************************
function FindDuke: Boolean;
Description: Finds the duke.
*******************************************************************************}
function FindDuke: Boolean;
begin
  Result := (UseCTS(DH_COL, DH_HUE, DH_SAT, DH_W, DH_H, DH_TOL, DH_XMOD, DH_YMOD, Point(MSX2, MSY2), DH_UPT));
end;

{*******************************************************************************
function TalkToDuke : Boolean;
Description: Starts the interacting with the duke.
*******************************************************************************}
function TalkToDuke : Boolean;
var
  X, Y: Integer;
  o: Extended;
begin
  if (not(WaitFunc(@FindDuke, 100, 20000))) then //If you dont find the duke in 20 seconds
  begin
    Writeln('Failed finding the duke');
    Writeln('FailSafe');
    o := SymbolAccuracy;
    SymbolAccuracy := 0.60;
    if FindSymbol(x, y, 'quest') then
    begin
      SymbolAccuracy := o;
      Mouse(x, y, 5, 5, True);
    end;
    if (not(WaitFunc(@FindDuke, 100, 10000))) then //then call it quits if you dont find it again.
    begin
      Writeln('Failed finding the duke(2)');
      TerminateScript;
    end else
      Result := True;
  end else
    Result := True;
end;

{*******************************************************************************
procedure R_ChatWithDuke;
Description: [REF] Chats with him.
*******************************************************************************}
procedure R_ChatWithDuke;
var
  i : Integer;
//  TP: TPoint;
begin
  while not R_ClickToContinue do
    Wait(RandomRange(500, 1500));

  Wait(RandomRange(500, 1500));
 // TP := GetChildComponentScreenPosition(14942208, 2, 2
  Wait(RandomRange(500, 1500));

  for i := 1 to 4 do
    while not R_ClickToContinue do
      Wait(RandomRange(500, 1500));
  Wait(RandomRange(500, 1500));

  MouseBox(129, 294, 214, 310, 1);
  Wait(RandomRange(500, 1500));

  for i := 1 to 4 do
    while not R_ClickToContinue do
      Wait(RandomRange(500, 1500));
  Wait(RandomRange(500, 1500));
end;

{*******************************************************************************
procedure ChatWithDuke;
Description: Chats with him.
*******************************************************************************}
procedure ChatWithDuke;
var
  i : Integer;
begin
  while not ClickToContinue do
    Wait(RandomRange(500, 1500));

  Wait(RandomRange(500, 1500));
  MouseBox(159, 400, 358, 407, 1);
  Wait(RandomRange(500, 1500));

  for i := 1 to 4 do
    while not ClickToContinue do
      Wait(RandomRange(500, 1500));
  Wait(RandomRange(500, 1500));

  MouseBox(129, 294, 214, 310, 1);
  Wait(RandomRange(500, 1500));

  for i := 1 to 4 do
    while not ClickToContinue do
      Wait(RandomRange(500, 1500));
  Wait(RandomRange(500, 1500));
end;

{*******************************************************************************
procedure ScriptTerminate;
Description: Last things to execute when script has finished or terminated.
*******************************************************************************}
procedure ScriptTerminate;
begin
  // Progress Report
  //if LoggedIn then
    //LogOut;
end;

{*******************************************************************************
procedure SetupRS;
Description: Configures RS for Current Player.
*******************************************************************************}
procedure SetupRS(First: Boolean);
begin
  if not LoggedIn then
    LoginPlayer;
  Wait(1500 + Random(30));
  SetAngle(True);
  MakeCompass('N');
  SortBook(BookSort_Teleport);
  SetRun(True);
end;

{*******************************************************************************
                                  End Script
*******************************************************************************}


////////////////
procedure FindObjNear;
var myObj : TRSObject;
    myTile, newTile : TTile;
begin
  if not LoggedIn then exit;
  myTile := GetMyPos;
  writeln ('[--Objects--]');
  newTile := Tile((myTile.x-1),myTile.y);
  MyObj := GetObjectAt(newTile, OBJECT_TYPE_INTERACTABLE);
    if MyObj.ID > 0 then
      begin
      writeln ('(W)');
      writeln ('ID: '+inttostr(MyObj.ID)+', Tile('+inttostr(MyObj.Tile.x)+','+inttostr(MyObj.Tile.y)+')');
      end;

  newTile := Tile((myTile.x),myTile.y-1);
  MyObj := GetObjectAt(newTile, OBJECT_TYPE_INTERACTABLE);
    if MyObj.ID > 0 then
      begin
      writeln ('(S)');
      writeln ('ID: '+inttostr(MyObj.ID)+', Tile('+inttostr(MyObj.Tile.x)+','+inttostr(MyObj.Tile.y)+')');
      end;

  newTile := Tile((myTile.x+1),myTile.y);
  MyObj := GetObjectAt(newTile, OBJECT_TYPE_INTERACTABLE);
    if MyObj.ID > 0 then
      begin
      writeln ('(E)');
      writeln ('ID: '+inttostr(MyObj.ID)+', Tile('+inttostr(MyObj.Tile.x)+','+inttostr(MyObj.Tile.y)+')');
      end;

  newTile := Tile((myTile.x),myTile.y+1);
  MyObj := GetObjectAt(newTile, OBJECT_TYPE_INTERACTABLE);
    if MyObj.ID > 0 then
      begin
      writeln ('(N)');
      writeln ('ID: '+inttostr(MyObj.ID)+', Tile('+inttostr(MyObj.Tile.x)+','+inttostr(MyObj.Tile.y)+')');
      end;
end;

{*******************************************************************************
function R_LoadPath(Path: Integer): TPointArray;
Description: [REF] Loads Reflection Path
*******************************************************************************}
function R_LoadPath(Path: Integer): TPointArray;
begin
  case Path of
    R_WALK_LS:  Result := [Point(3221, 3217), Point(3215, 3217), Point(3215, 3222),
                           Point(3214, 3226), Point(3210, 3226), Point(3206, 3227)];
    R_WALK_LD:  Result := [Point(3206, 3222)];
    R_WALK_LT:  Result := [Point(3225, 3217), Point(3228, 3217), Point(3231, 3217),
                           Point(3233, 3213), Point(3232, 3210), Point(3227, 3205),
                           Point(3223, 3200), Point(3218, 3199), Point(3211, 3199),
                           Point(3205, 3199), Point(3200, 3199), Point(3195, 3202),
                           Point(3191, 3205), Point(3187, 3207), Point(3182, 3207),
                           Point(3175, 3208), Point(3171, 3208), Point(3167, 3208),
                           Point(3163, 3209), Point(3160, 3210), Point(3157, 3212),
                           Point(3153, 3214), Point(3148, 3215), Point(3143, 3214),
                           Point(3140, 3210), Point(3138, 3208), Point(3134, 3205),
                           Point(3130, 3204), Point(3125, 3205), Point(3119, 3205),
                           Point(3116, 3207), Point(3113, 3204), Point(3113, 3198),
                           Point(3113, 3194), Point(3113, 3189), Point(3113, 3185),
                           Point(3113, 3180), Point(3113, 3175), Point(3113, 3170),
                           Point(3112, 3167), Point(3109, 3166)];
    R_WALK_LV:  Result := [Point(3222, 3217), Point(3227, 3217), Point(3230, 3217),
                           Point(3233, 3217), Point(3236, 3219), Point(3236, 3222),
                           Point(3238, 3224), Point(3242, 3224), Point(3246, 3224),
                           Point(3251, 3224), Point(3254, 3225), Point(3257, 3227),
                           Point(3259, 3231), Point(3260, 3233), Point(3260, 3238),
                           Point(3258, 3243), Point(3256, 3247), Point(3254, 3250),
                           Point(3251, 3254), Point(3250, 3258), Point(3250, 3262),
                           Point(3250, 3267), Point(3248, 3269), Point(3246, 3273),
                           Point(3244, 3276), Point(3241, 3279), Point(3239, 3283),
                           Point(3239, 3287), Point(3239, 3293), Point(3239, 3298),
                           Point(3239, 3304), Point(3242, 3308), Point(3245, 3312),
                           Point(3249, 3315), Point(3251, 3318), Point(3253, 3321),
                           Point(3255, 3322), Point(3258, 3323), Point(3262, 3324),
                           Point(3266, 3325), Point(3269, 3327), Point(3270, 3331),
                           Point(3274, 3333), Point(3279, 3334), Point(3280, 3338),
                           Point(3284, 3339), Point(3286, 3342), Point(3287, 3346),
                           Point(3289, 3349), Point(3293, 3351), Point(3296, 3355),
                           Point(3297, 3359), Point(3296, 3363), Point(3294, 3368),
                           Point(3294, 3373), Point(3293, 3378), Point(3293, 3384),
                           Point(3293, 3388), Point(3292, 3393), Point(3291, 3399),
                           Point(3293, 3404), Point(3292, 3408), Point(3289, 3412),
                           Point(3287, 3416), Point(3287, 3420), Point(3285, 3425),
                           Point(3283, 3428), Point(3279, 3429), Point(3276, 3429),
                           Point(3270, 3429), Point(3266, 3427), Point(3266, 3423),
                           Point(3266, 3419), Point(3264, 3415), Point(3260, 3413),
                           Point(3259, 3409), Point(3258, 3404), Point(3257, 3400),
                           Point(3254, 3398), Point(3253, 3402)];
  end;
end;

{*******************************************************************************
function R_WalkTo(Path: Integer): Boolean;
Description: [REF] Walk to ...
*******************************************************************************}
function R_WalkTo(Path: Integer): Boolean;
begin
  SetAngle(True);
  MakeCompass('n');
  SetRun(True);
  if (WalkPath(R_LoadPath(Path))) then
    Result := True;
end;

{*******************************************************************************
function WalkToTower: Boolean;
Description: Walk to The Tower
*******************************************************************************}
function WalkToTower: Boolean;
begin
  SetAngle(True);
  MakeCompass('n');
  SetRun(True);
  case UseRef of
    True: begin
            Writeln('Walking to tower [Ref]');

            if (R_WalkTo(R_WALK_LT)) then
            begin
              Writeln('At the Tower');
              Result := True;
            end;
          end;
    False: Exit;
  end;
end;

{*******************************************************************************
function CompleteTower: Boolean;
Description: Finishes The Tower
*******************************************************************************}
function CompleteTower: Boolean;
var
  TPA: TPointArray;
begin
  SetAngle(True);
  MakeCompass('n');
  SetRun(True);
  if (CountColorTolerance(4090509, MSCX - 60, MSCY - 60, MSCX + 60, MSCY + 60, 21) > 500) then
  begin
    Writeln('Door Closed');
    if (not(WaitFunc(@FindTowerDoor, 1000, 20000))) then
    begin
      Writeln('Failed door finding');
      Exit;
    end;
  end else
    Writeln('Door Open');
  Wait(2500 + Random(2000));

  TPA := GetMiniMapDots('npc');
  if Length(TPA) = 0 then
  begin
    Writeln('Empty TPA');
    Exit;
  end;
  SortTPAFrom(TPA, Point(MMX1, MMY2));
  Mouse(TPA[0].x, TPA[0].y, 2, 2, true);
  Flag;
  MakeCompass('w');
  if UseCTS(BB_COL, BB_HUE, BB_SAT, BB_W, BB_H, BB_TOL, BB_XMOD, BB_YMOD, Point(MSCX, MSCY), BB_UPT) then
    Writeln('In Basement');


 // if UseCTS(SE_COL, SE_HUE, SE_SAT, SE_W, SE_H, SE_TOL, SE_XMOD, SE_YMOD, Point(MSCX, MSCY), SE_UPT) then
   // Writeln('Found Sedridor');
end;

{*******************************************************************************
function R_StartQuest: Boolean;
Description: Lets start, k?
*******************************************************************************}
function R_StartQuest: Boolean;
begin
  if R_WalkTo(R_WALK_LS) then
    if R_UpLumbridgeStairs then
      if R_SecondFloor then
        if R_WalkTo(R_WALK_LD) then
          if R_FindLumbyDoor then
            Result := True;
end;

{*******************************************************************************
function StartQuest: Boolean;
Description: Lets start, k?
*******************************************************************************}
function StartQuest: Boolean;
var
  Box: TBox;
begin
  Cast('lumbridge home teleport', False);
  Wait(15000 + Random(4000));
  Writeln('In Lumbridge');
  SetAngle(True);
  Writeln('Fixed the compass angle');
  if UseRef then
    if R_StartQuest then
    begin
      Result := True;
      Cast('lumbridge home teleport', False);
      Wait(15000 + Random(4000));
      Exit;
    end else
    begin
      Writeln('[REF] Failed');
      Exit;
    end;
  if WalkTo(9145483, 19, 0, 0, Point(569, 52), Box) then
  begin
    Writeln('Walked to the stair case');
    if (UpLumbridgeStairs(LS_COL, LS_TOL, LS_ATPA_WIDTH, LS_WIDTH, LS_HEIGHT, LS_XMOD, LS_YMOD, LS_UPTEXT, LS_OPTION)) then
    begin
      Wait(1500 + Random(1500));
      Writeln('Arrived at the second floor');
      // Maybe we should constant this info
      if (WalkTo(263409, 12, 0, 0, Point(638, 111), PointToBox(Point(633, 86), Point(639, 92)))) then
      begin
        Writeln('Arrived at door');
        if (not(WaitFunc(@FindLumbyDoor, 100, 20000))) then
        begin
          Writeln('Failed door finding');
          Exit;
        end;
        Wait(2500 + Random(2000));
        if (TalkToDuke) then
        begin
          ChatWithDuke;
          Result := True;
          Cast('lumbridge home teleport', False);
          Wait(15000 + Random(4000));
          Exit;
        end;
      end;
    end;
  end;
end;

{*******************************************************************************
function R_ChatOption(InterfaceID, ComponentID: Integer): boolean;
Description: Uses interface ID's to select a chat option
*******************************************************************************}
function R_ChatOption(InterfaceID, ComponentID: Integer): boolean;
var
  TP: TPoint;
  w, h: Integer;
begin
  if ValidInterface(InterfaceID) then
  begin
    Writeln('Message: ' + GetInterfaceText(InterfaceID, ComponentID));
    TP := GetInterfaceComponentRelativePoint(InterfaceID, ComponentID);
    w := GetInterfaceComponentWidth(InterfaceID, ComponentID);
    h := GetInterfaceComponentHeight(InterfaceID, ComponentID)
    Writeln('Relative Pos: ' + IntToStr(TP.X) + ',' + IntToStr(TP.y));
    Writeln('Width: ' + IntToStr(w));
    Writeln('Height: ' + IntToStr(h));
    TP.x := RandomRange(TP.x + INTERFACE_CHAT_XOFFSET, TP.x + INTERFACE_CHAT_XOFFSET + w);
    TP.y := RandomRange(TP.y + INTERFACE_CHAT_YOFFSET, TP.y + INTERFACE_CHAT_YOFFSET + h);
    Writeln('Random Pos: ' + IntToStr(TP.X) + ',' + IntToStr(TP.y));
    Mouse(TP.x, TP.y, 0, 0, True);
    Result := True;
  end else
    Result := False;
end;

{*******************************************************************************
procedure MainLoop;
Description: The Main Loop :)
*******************************************************************************}
procedure MainLoop;
var
  TP: TPoint;
begin
  //SetupRS(True);

  //StartQuest;
  //R_FindLumbyDoor;
  //SetAngle(True);
  //WalkToTower;
  //CompleteTower;
  //FindObjNear;
  //LogInPlayer;
 // MakeCompass('e');
  //SetAngle(True);
  //R_DebugNPCs(True);
  //R_DebugObjects(OBJECT_TYPE_INTERACTABLE, True, clRed);
  //Wait(10000);
  //R_DebugObjects(OBJECT_TYPE_WALLOBJECT, False, clBlue);
  //Wait(10000);
  //R_DebugObjects(OBJECT_TYPE_WALLDECOR, True, clGreen);
  //Wait(10000);
  //R_DebugObjects(OBJECT_TYPE_FLOORDECOR, True, clBlack);
  //R_StartQuest;
  //R_Debug(IntToStr(GetMyPos.x) + ',' + IntToStr(GetMyPos.y), '');
  //R_FindDuke;

  {Writeln(GetInterfaceText(228, 2));
  TP := GetInterfaceComponentRelativePoint(228, 2);
  Writeln(IntToStr(TP.X) + ',' + IntToStr(TP.y));
  TP.x := RandomRange(TP.x + 7, TP.x + 7 + GetInterfaceComponentWidth(228, 2));
  TP.y := RandomRange(TP.y + 347, TP.y + 347 + GetInterfaceComponentHeight(228, 2));
  Writeln(IntToStr(TP.X) + ',' + IntToStr(TP.y));
  MMouse(TP.x, TP.y, 0, 0);  }
  //TB := GetChildComponentScreenPosition(228
  R_ChatOption(228, 2);
end;

begin
  AddOnTerminate('ScriptTerminate');
  SetupSmart;
  SetupSRL;
  SetupReflectionEx(true);
  MouseSpeed := MOUSE_SPEED;
  DeclarePlayers;
  SetupSpells;

  //repeat
    MainLoop;
  //until(AllPlayersInActive);
end.
